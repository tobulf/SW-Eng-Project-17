<alloy builddate="2012-09-25 15:54 EDT">

<instance bitwidth="0" maxseq="0" command="Check noUserIsEqual" filename="C:\Users\tobul\OneDrive\Documents\Git\SW-Eng-Project-17\RASD\Alloy\model.als">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/integer" ID="4" parentID="2">
   <atom label="integer$0"/>
</sig>

<sig label="this/string" ID="5" parentID="2">
   <atom label="string$0"/>
   <atom label="string$1"/>
   <atom label="string$2"/>
</sig>

<sig label="this/float" ID="6" parentID="2">
   <atom label="float$0"/>
</sig>

<sig label="this/coordinates" ID="7" parentID="2">
   <atom label="coordinates$0"/>
   <atom label="coordinates$1"/>
   <atom label="coordinates$2"/>
</sig>

<field label="latitude" ID="8" parentID="7">
   <tuple> <atom label="coordinates$0"/> <atom label="float$0"/> </tuple>
   <tuple> <atom label="coordinates$1"/> <atom label="float$0"/> </tuple>
   <tuple> <atom label="coordinates$2"/> <atom label="float$0"/> </tuple>
   <types> <type ID="7"/> <type ID="6"/> </types>
</field>

<field label="longitude" ID="9" parentID="7">
   <tuple> <atom label="coordinates$0"/> <atom label="float$0"/> </tuple>
   <tuple> <atom label="coordinates$1"/> <atom label="float$0"/> </tuple>
   <tuple> <atom label="coordinates$2"/> <atom label="float$0"/> </tuple>
   <types> <type ID="7"/> <type ID="6"/> </types>
</field>

<sig label="this/appointment" ID="10" parentID="2">
   <atom label="appointment$0"/>
   <atom label="appointment$1"/>
</sig>

<field label="location" ID="11" parentID="10">
   <types> <type ID="10"/> <type ID="7"/> </types>
</field>

<field label="time" ID="12" parentID="10">
   <tuple> <atom label="appointment$0"/> <atom label="float$0"/> </tuple>
   <types> <type ID="10"/> <type ID="6"/> </types>
</field>

<field label="date" ID="13" parentID="10">
   <tuple> <atom label="appointment$1"/> <atom label="float$0"/> </tuple>
   <types> <type ID="10"/> <type ID="6"/> </types>
</field>

<field label="name" ID="14" parentID="10">
   <tuple> <atom label="appointment$1"/> <atom label="string$2"/> </tuple>
   <types> <type ID="10"/> <type ID="5"/> </types>
</field>

<field label="ETA" ID="15" parentID="10">
   <tuple> <atom label="appointment$0"/> <atom label="integer$0"/> </tuple>
   <tuple> <atom label="appointment$1"/> <atom label="integer$0"/> </tuple>
   <types> <type ID="10"/> <type ID="4"/> </types>
</field>

<sig label="this/user" ID="16" parentID="2" abstract="yes">
   <atom label="user$0"/>
   <atom label="user$1"/>
</sig>

<field label="password" ID="17" parentID="16">
   <tuple> <atom label="user$0"/> <atom label="string$2"/> </tuple>
   <tuple> <atom label="user$1"/> <atom label="string$0"/> </tuple>
   <types> <type ID="16"/> <type ID="5"/> </types>
</field>

<field label="email" ID="18" parentID="16">
   <tuple> <atom label="user$0"/> <atom label="string$2"/> </tuple>
   <tuple> <atom label="user$1"/> <atom label="string$1"/> </tuple>
   <types> <type ID="16"/> <type ID="5"/> </types>
</field>

<field label="appointments" ID="19" parentID="16">
   <tuple> <atom label="user$0"/> <atom label="appointment$0"/> </tuple>
   <tuple> <atom label="user$1"/> <atom label="appointment$0"/> </tuple>
   <tuple> <atom label="user$1"/> <atom label="appointment$1"/> </tuple>
   <types> <type ID="16"/> <type ID="10"/> </types>
</field>

<sig label="boolean/True" ID="20" parentID="21" one="yes">
   <atom label="boolean/True$0"/>
</sig>

<sig label="boolean/False" ID="22" parentID="21" one="yes">
   <atom label="boolean/False$0"/>
</sig>

<sig label="boolean/Bool" ID="21" parentID="2" abstract="yes">
</sig>

<sig label="univ" ID="2" builtin="yes">
</sig>

</instance>

<source filename="C:\Users\tobul\OneDrive\Documents\Git\SW-Eng-Project-17\RASD\Alloy\model.als" content="/* Alloy model Travlendar+&#x000a;&#x000a;&#x0009;&#x0009;Tobias Rasmussen&#x000a;&#x0009;&#x0009;October 2017&#x000a;&#x000a;*/&#x000a;&#x000a;&#x000a;module travlendar&#x000a;open util/boolean&#x000a;// Starting with the basics&#x000a;&#x000a;//Variables&#x000a;&#x000a;&#x000a;&#x000a;sig integer{}&#x000a;sig string{}&#x000a;sig float{}&#x000a;&#x000a;&#x000a;// Coordinates&#x000a;sig coordinates{&#x000a;latitude: one float,&#x000a;longitude: one float&#x000a;}&#x000a;&#x000a;// Appointment&#x000a;sig appointment{&#x000a;location: lone coordinates, //only one location for each appointment&#x000a;time:  lone float,// only one time&#x000a;date: lone float, // only one date&#x000a;name: lone string, // only one name&#x000a;ETA: lone integer&#x000a;}&#x000a;&#x000a;//User&#x000a;abstract sig user {&#x000a;// each user has a Email and password&#x000a;password: lone string,&#x000a;email: lone string,&#x000a;&#x000a;appointments: set appointment&#x000a;}&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;// FACTS:&#x000a;// There can only be one user with an specific email:&#x000a;fact diffEmail{&#x000a;&#x0009;all disj u1,u2: user | u1. email != u2.email&#x000a;}&#x000a;&#x000a;// Appointments cannot have several locations times etc:&#x000a;fact uniAppointment{&#x000a;&#x0009;&#x000a;}&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;// Checks:&#x000a;assert noUserIsEqual{&#x000a;&#x0009;// User may not have same email:&#x000a;&#x0009;all disj u1,u2: user | u1.email != u2.email&#x000a;&#x0009;all disj p1, p2:user.password | p1 = p2&#x000a;}&#x000a;&#x000a;check noUserIsEqual&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;"/>

<source filename="\$alloy4$\models\util\integer.als" content="module util/integer&#x000a;&#x000a;/*&#x000a; * A collection of utility functions for using Integers in Alloy.&#x000a; * Note that integer overflows are silently truncated to the current bitwidth&#x000a; * using the 2&apos;s complement arithmetic, unless the &quot;forbid overfows&quot; option is&#x000a; * turned on, in which case only models that don&apos;t have any overflows are &#x000a; * analyzed. &#x000a; */&#x000a;&#x000a;fun add  [n1, n2: Int] : Int { this/plus[n1, n2] }&#x000a;fun plus [n1, n2: Int] : Int { n1 fun/add n2 }&#x000a;&#x000a;fun sub   [n1, n2: Int] : Int { this/minus[n1, n2] }&#x000a;fun minus [n1, n2: Int] : Int { n1 fun/sub n2 }&#x000a;&#x000a;fun mul [n1, n2: Int] : Int { n1 fun/mul n2 }&#x000a;&#x000a;/**&#x000a; * Performs the division with &quot;round to zero&quot; semantics, except the following 3 cases&#x000a; * 1) if a is 0, then it returns 0&#x000a; * 2) else if b is 0, then it returns 1 if a is negative and -1 if a is positive&#x000a; * 3) else if a is the smallest negative integer, and b is -1, then it returns a&#x000a; */&#x000a;fun div [n1, n2: Int] : Int { n1 fun/div n2 }&#x000a;&#x000a;/** answer is defined to be the unique integer that satisfies &quot;a = ((a/b)*b) + remainder&quot; */&#x000a;fun rem [n1, n2: Int] : Int { n1 fun/rem n2 }&#x000a;&#x000a;/** negate */&#x000a;fun negate [n: Int] : Int { 0 fun/sub n }&#x000a;&#x000a;/** equal to */&#x000a;pred eq [n1, n2: Int] { int[n1] = int[n2] }&#x000a;&#x000a;/** greater than */&#x000a;pred gt [n1, n2: Int] { n1 &gt; n2 }&#x000a;&#x000a;/** less then */&#x000a;pred lt [n1, n2: Int] { n1 &lt; n2 }&#x000a;&#x000a;/** greater than or equal */&#x000a;pred gte [n1, n2: Int] { n1 &gt;= n2 }&#x000a;&#x000a;/** less than or equal */&#x000a;pred lte [n1, n2: Int] { n1 &lt;= n2 }&#x000a;&#x000a;/** integer is zero */&#x000a;pred zero [n: Int] { n = 0 }&#x000a;&#x000a;/** positive */&#x000a;pred pos  [n: Int] { n &gt; 0 }&#x000a;&#x000a;/** negative */&#x000a;pred neg  [n: Int] { n &lt; 0 }&#x000a;&#x000a;/** non-positive */&#x000a;pred nonpos [n: Int] { n &lt;= 0 }&#x000a;&#x000a;/** non-negative */&#x000a;pred nonneg [n: Int] { n &gt;= 0 }&#x000a;&#x000a;/** signum (aka sign or sgn) */&#x000a;fun signum [n: Int] : Int { n&lt;0 =&gt; (0 fun/sub 1) else (n&gt;0 =&gt; 1 else 0) }&#x000a;&#x000a;/**&#x000a; * returns the ith element (zero-based) from the set s&#x000a; * in the ordering of &apos;next&apos;, which is a linear ordering&#x000a; * relation like that provided by util/ordering&#x000a; */&#x000a;fun int2elem[i: Int, next: univ-&gt;univ, s: set univ] : lone s {&#x000a;  {e: s | #^next.e = int i }&#x000a;}&#x000a;&#x000a;/**&#x000a; * returns the index of the element (zero-based) in the&#x000a; * ordering of next, which is a linear ordering relation&#x000a; * like that provided by util/ordering&#x000a; */&#x000a;fun elem2int[e: univ, next: univ-&gt;univ] : lone Int {&#x000a;  Int[#^next.e]&#x000a;}&#x000a;&#x000a;/** returns the largest integer in the current bitwidth */&#x000a;fun max:one Int { fun/max }&#x000a;&#x000a;/** returns the smallest integer in the current bitwidth */&#x000a;fun min:one Int { fun/min }&#x000a;&#x000a;/** maps each integer (except max) to the integer after it */&#x000a;fun next:Int-&gt;Int { fun/next }&#x000a;&#x000a;/** maps each integer (except min) to the integer before it */&#x000a;fun prev:Int-&gt;Int { ~next }&#x000a;&#x000a;/** given a set of integers, return the largest element */&#x000a;fun max [es: set Int]: lone Int { es - es.^prev }&#x000a;&#x000a;/** given a set of integers, return the smallest element */&#x000a;fun min [es: set Int]: lone Int { es - es.^next }&#x000a;&#x000a;/** given an integer, return all integers prior to it */&#x000a;fun prevs [e: Int]: set Int { e.^prev }&#x000a;&#x000a;/** given an integer, return all integers following it */&#x000a;fun nexts [e: Int]: set Int { e.^next }&#x000a;&#x000a;/** returns the larger of the two integers */&#x000a;fun larger [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; b else a) }&#x000a;&#x000a;/** returns the smaller of the two integers */&#x000a;fun smaller [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; a else b) }&#x000a;"/>

<source filename="\$alloy4$\models\util\boolean.als" content="module util/boolean&#x000a;&#x000a;/*&#x000a; * Creates a Bool type with two singleton subtypes: True&#x000a; * and False. Provides common boolean operations.&#x000a; *&#x000a; * author: Greg Dennis&#x000a; */&#x000a;&#x000a;abstract sig Bool {}&#x000a;one sig True, False extends Bool {}&#x000a;&#x000a;pred isTrue[b: Bool] { b in True }&#x000a;&#x000a;pred isFalse[b: Bool] { b in False }&#x000a;&#x000a;fun Not[b: Bool] : Bool {&#x000a;  Bool - b&#x000a;}&#x000a;&#x000a;fun And[b1, b2: Bool] : Bool {&#x000a;  subset_[b1 + b2, True]&#x000a;}&#x000a;&#x000a;fun Or[b1, b2: Bool] : Bool {&#x000a;  subset_[True, b1 + b2]&#x000a;}&#x000a;&#x000a;fun Xor[b1, b2: Bool] : Bool {&#x000a;  subset_[Bool, b1 + b2]&#x000a;}&#x000a;&#x000a;fun Nand[b1, b2: Bool] : Bool {&#x000a;  subset_[False, b1 + b2]&#x000a;}&#x000a;&#x000a;fun Nor[b1, b2: Bool] : Bool {&#x000a;  subset_[b1 + b2, False]&#x000a;}&#x000a;&#x000a;fun subset_[s1, s2: set Bool] : Bool {&#x000a;  (s1 in s2) =&gt; True else False&#x000a;}&#x000a;"/>

</alloy>
